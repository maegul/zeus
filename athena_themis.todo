
 ☐ Subtraction of spontaneous activity @high
     1 second before markers should be safely blank!

 ☐ Clean way of extracting only one side of biphasic responses @high




 ☐ Functions for checking data and output paths, and, changing them (for file mobility)
 ☐ Functions for 
   ✔ updating, @done (19-02-05 01:41)
   ✔ encoding and @done (19-02-27 22:07)
   ✔ checking the meta data of a run on a cell @done (19-02-27 22:07)

 ☐ Loading multiunit data from heph objects
   Key problem right now is the logic for extracting spike averages and the like, as they are given slightly different attribute names
   
   ☐ Project
     shared function between athena and zeus, given particular project Title, Description generate ... 
       ☐ Unique Identifier (hash? of title, description and date time of creation?)
       ☐ Abbreviated title (user provided?)
     to be used in file names
     ☐ Once generated, can pass a file reference or object to either a zeus or athena object to attach an associated with the project

   ☐ Cell identity:
     * Experiment (ie MBC23)
     * Unit
     * Cell (cluster label or cell number within single recording)
   ☐ Meta Data
     * Track number (where relevant)
   ☐ Stim Data
     * Needs to be dynamically updated to the needs of the stimulus

 ☐ Additionally, each summary statistic analysed by athena has the metadata of which run it is from
   also need to make sure that there is the possibility for multiple summary statistics

 ☐ Documentation for tuning plotting function
     

Saving:
  ☐ Where to save a pre-existing object when it has been loaded into a new directory space??? @critical
    * Currently, it appears that I use the self.save_path attribute, which will be the local path at the time of the initial save.
    * Could add a use_absolute flag, that allows the user to save in the new directory, because that's what they want
    * Also, add logic that checks if using the save_path in the current directory will lead to a new absolute path (ie, check if overwriting an existing file)
    * **PERHAPS BEST WAY** is to add logic to the load function that adds an attribute to the athena or themis or other object for the path from which the object it was originally loaded, which can then be used to save with.
    * **MAYBE EVEN BETTER** is to have a central registry of where files are relative to a common root
    and all saving and loading logic goes through this registry, which could simply be a list or dictionary like object saved to file (JSON)

Good to have:
  ☐ change methods to no underscore, and attributes to Capital
    Should be possible with a good regex
  ☐ Class decorator that saves each method argument as a parameter
    Basically, a decorator that alters each method of the class (much like a function decorator) to inspect the arguments and store them in a class attribute


Efficiency Fixes/Improvements:
  ☐ Use unique values in hermes cell_id checks (using the fuzzy checker)